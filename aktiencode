import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
from statsmodels.tsa.arima_model import ARIMA

# Laden der Daten aus Ihrem Datensatz
data = 01.11.2017;7.6;4.5;13.6 02.11.2017;9.4;3.8;15 03.11.2017;9.5;5.3;14.3 04.11.2017;10;3.2;16.9 05.11.2017;8.7;5.6;11.9 06.11.2017;5.6;3.8;7.7 07.11.2017;6.6;4.6;8.5 08.11.2017;6.4;6.1;6.9 09.11.2017;6.3;5.7;7 10.11.2017;6;4.8;7.3 11.11.2017;6.6;4.4;9.4 12.11.2017;4.6;1.9;6.3 13.11.2017;3.7;0.7;7 14.11.2017;1.9;0.8;5.1 15.11.2017;0.9;2;5.6 16.11.2017;1.7;0.9;2.4 17.11.2017;2.9;1.4;4.7 18.11.2017;4.9;3.6;7.1 19.11.2017;4.7;1.6;7 20.11.2017;4.2;2.6;6.8 21.11.2017;7.1;4.6;8.7 22.11.2017;7.4;2.9;15 23.11.2017;11;1.2;16.1 24.11.2017;12.2;10.1;15.8 25.11.2017;6.4;2.6;11.1 26.11.2017;2.7;1.2;4.6 27.11.2017;4;1.6;5.5 28.11.2017;4.6;2.9;5.6 29.11.2017;2.1;1.2;4 30.11.2017;0.9;0.5;2.1 01.11.2018;7.2;2.1;12.4 02.11.2018;9;4.9;13.5 03.11.2018;9.1;6.3;11.8 04.11.2018;10.8;9.8;11.8 05.11.2018;10;5.4;15.6 06.11.2018;8.6;2.3;17 07.11.2018;9;2.7;17.7 08.11.2018;10.3;7.9;12.1 09.11.2018;8.6;4.1;13.6 10.11.2018;8.8;2.7;14.2 11.11.2018;13;8.7;16.1 12.11.2018;13.2;8.8;17.2 13.11.2018;10.2;5.3;13.8 14.11.2018;5;1.3;12.7 15.11.2018;5.3;3.8;6.2 16.11.2018;4.7;1.1;10.3 17.11.2018;4.1;0.2;10 18.11.2018;2.7;0.8;7.1 19.11.2018;1.5;2.1;3.5 20.11.2018;1.9;1.2;4.5 21.11.2018;0.4;2.8;1.6 22.11.2018;2.2;1.9;7.5 23.11.2018;1.5;3.7;6.7 24.11.2018;6.1;2.5;10.3 25.11.2018;5.4;0.4;10.6 26.11.2018;4.3;3.3;5.1 27.11.2018;3;1.7;4.1 28.11.2018;2.6;1.2;6.2 29.11.2018;4.2;0.8;7.9 30.11.2018;3.5;0;7.1 01.11.2019;9.4;5.2;13.4 02.11.2019;15;12;18.7 03.11.2019;11.9;10.1;13.9 04.11.2019;10.9;9.2;13.2 05.11.2019;8.8;6.4;12 06.11.2019;8;5.5;10.5 07.11.2019;8.2;4.3;11.3 08.11.2019;5.6;4.2;6.7 09.11.2019;5;0.1;9.5 10.11.2019;2.2;2.5;9.5 11.11.2019;2.6;0.3;5.6 12.11.2019;6;3.7;9.3 13.11.2019;4.8;1.6;8.1 14.11.2019;4;0.9;9.7 15.11.2019;3.7;1.8;6 16.11.2019;4.2;1.4;7.9 17.11.2019;3.4;1.2;5.1 18.11.2019;4.9;3.9;6.7 19.11.2019;4.5;1.2;6.1 20.11.2019;1.8;0;3.3 21.11.2019;3.9;0.2;7.7 22.11.2019;2.9;1.3;7.7 23.11.2019;6.3;1.1;11.6 24.11.2019;3.7;0.6;7.9 25.11.2019;5.1;1;7.8 26.11.2019;7.8;4.6;13.3 27.11.2019;9.8;4.9;13.4 28.11.2019;10.1;8.8;11.5 29.11.2019;6.3;1.7;9.8 30.11.2019;2.9;1;7.2

# Konvertieren der Daten in ein DataFrame
df = pd.DataFrame([line.split(';') for line in data], columns=['Date', 'Value1', 'Value2', 'Value3'])

# Konvertieren des Datums in den richtigen Datumsdatentyp
df['Date'] = pd.to_datetime(df['Date'], format='%d.%m.%Y')

# Setzen des Datums als Index
df.set_index('Date', inplace=True)

# Definieren Sie die Zeitreihe, die Sie vorhersagen möchten (z.B., 'Value1' oder 'Value2')
time_series = df['Value1']

# ARIMA-Modell erstellen und trainieren
model = ARIMA(time_series, order=(5,1,0))  # Hier können Sie die Modellparameter anpassen
model_fit = model.fit(disp=0)

# Vorhersage für zukünftige Werte
forecast_steps = 5  # Anzahl der zukünftigen Zeitschritte, die Sie vorhersagen möchten
forecast = model_fit.forecast(steps=forecast_steps)

# Ausgabe der Vorhersagen
print("Vorhersagen für die nächsten", forecast_steps, "Zeitschritte:")
print(forecast)

# Plot der Vorhersagen
plt.plot(time_series, label='Beobachtete Werte')
plt.plot(pd.date_range(start=time_series.index[-1], periods=forecast_steps, closed='right'), forecast, label='Vorhersagen', linestyle='--')
plt.legend()
plt.show()

#testimetse
